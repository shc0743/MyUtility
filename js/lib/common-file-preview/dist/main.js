let configProvider;
const createDefaultConfigProvider = () => {
    const storage = new Map();
    return {
        async get(name) {
            return storage.get(name) || null;
        },
        async set(name, value) {
            storage.set(name, value);
        }
    };
};
configProvider = createDefaultConfigProvider();
export const setConfigProvider = (provider) => { configProvider = provider; };
export async function config(name, value) { return await configProvider.set(name, value); }
const i18n_strtable = {
    'en': {
        'f2lp': 'Failed to load preview',
        'phbdd2ac': 'Preview has been disabled due to a configuration.',
        'c2dl': 'Click to download the file.',
        'np': 'No preview available.',
        'tftl': 'The text file is too large, which is not supported to preview directly.',
    },
    'zh': {
        'f2lp': '无法加载预览',
        'phbdd2ac': '预览功能由于某个设置项而被停用。',
        'c2dl': '点击下载文件。',
        'np': '没有预览。',
        'tftl': '文本文件太大，无法直接预览。',
    },
    // The following translations are generated by AI.
    // AI also make mistakes, so check them if you don't think they are correct.
    'ja': {
        'f2lp': 'プレビューの読み込みに失敗しました',
        'phbdd2ac': '設定によりプレビューが無効になっています。',
        'c2dl': 'ファイルをダウンロードするにはクリックしてください。',
        'np': 'プレビューは利用できません。',
        'tftl': 'テキストファイルが大きすぎて、直接プレビューできません。',
    },
    'ru': {
        'f2lp': 'Не удалось загрузить предварительный просмотр',
        'phbdd2ac': 'Предварительный просмотр отключен из-за настройки.',
        'c2dl': 'Нажмите, чтобы скачать файл.',
        'np': 'Предварительный просмотр недоступен.',
        'tftl': 'Текстовый файл слишком большой для предварительного просмотра.',
    },
    'fr': {
        'f2lp': 'Échec du chargement de l’aperçu',
        'phbdd2ac': 'L’aperçu a été désactivé en raison d’une configuration.',
        'c2dl': 'Cliquez pour télécharger le fichier.',
        'np': 'Aucun aperçu disponible.',
        'tftl': 'Le fichier texte est trop volumineux pour être prévisualisé directement.',
    },
    'de': {
        'f2lp': 'Vorschau konnte nicht geladen werden',
        'phbdd2ac': 'Vorschau wurde aufgrund einer Konfiguration deaktiviert.',
        'c2dl': 'Klicken Sie hier, um die Datei herunterzuladen.',
        'np': 'Keine Vorschau verfügbar.',
        'tftl': 'Die Textdatei ist zu groß, um direkt angezeigt zu werden.',
    },
    'it': {
        'f2lp': 'Impossibile caricare l\'anteprima',
        'phbdd2ac': 'L\'anteprima è stata disabilitata a causa di una configurazione.',
        'c2dl': 'Clicca per scaricare il file.',
        'np': 'Nessuna anteprima disponibile.',
        'tftl': 'Il file di testo è troppo grande per essere visualizzato direttamente.',
    },
    'ar': {
        'f2lp': 'فشل تحميل المعاينة',
        'phbdd2ac': 'تم تعطيل المعاينة بسبب إعداد.',
        'c2dl': 'انقر لتنزيل الملف.',
        'np': 'لا توجد معاينة متاحة.',
        'tftl': 'ملف النص كبير جدًا ولا يمكن معاينته مباشرة.',
    },
};
// Determine user's preferred language once for performance
const user_lang = (() => {
    const langs = navigator.languages;
    for (const lang of langs) {
        const baseLang = lang.split('-')[0];
        if (lang in i18n_strtable)
            return lang;
        if (baseLang in i18n_strtable)
            return baseLang;
    }
    return 'en';
})();
function i18n(str) {
    return i18n_strtable[user_lang]?.[str] ?? str;
}
export class HTMLCommonFilePreviewElement extends HTMLElement {
    static stylesheet = new CSSStyleSheet();
    #initbit = false;
    #el;
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
        if (!this.shadowRoot)
            throw new Error('Failed to attach shadow root!');
        this.shadowRoot.adoptedStyleSheets = [HTMLCommonFilePreviewElement.stylesheet];
        this.#el = document.createElement('div');
        this.#el.id = 'app';
        this.#el.innerText = 'Loading...';
        this.shadowRoot.append(this.#el);
    }
    connectedCallback() {
        // Component connected to the DOM
    }
    disconnectedCallback() {
        // Component disconnected from the DOM
    }
    async init(get_url, fileType, fileName) {
        if (this.#initbit)
            throw new Error('HTMLCommonFilePreviewElement has been initialized!');
        if (!this.#el)
            throw new Error('HTMLCommonFilePreviewElement is not created properly!');
        const type_array = fileType.split('/');
        const majorType = type_array[0];
        const minorType = type_array[1] || '';
        const theUrl = await get_url();
        let is_downgraded = false;
        switch (majorType) {
            case 'audio':
            case 'video': if (false === (await configProvider.get('DisallowMediaPreview') == 'true' ||
                (majorType === 'audio' && await configProvider.get('DisallowAudioPreview') == 'true') ||
                (majorType === 'video' && await configProvider.get('DisallowVideoPreview') == 'true'))) {
                const apply_volume = (p) => {
                    p.addEventListener('volumechange', async () => {
                        // save the user's volume preference
                        await configProvider.set('PreferredVolume', String(p.volume));
                    });
                    queueMicrotask(async () => {
                        // set the volume to the user's preference
                        const preferredVolume = await configProvider.get('PreferredVolume');
                        if (preferredVolume)
                            p.volume = +preferredVolume;
                    });
                };
                const p = document.createElement(majorType);
                p.id = 'app';
                this.#el.replaceWith(p);
                p.controls = true;
                if (p instanceof HTMLVideoElement)
                    p.playsInline = true;
                apply_volume(p);
                let source = document.createElement('source');
                source.src = await get_url(3600 * 24); // 24小时的临时链接
                source.type = fileType;
                p.appendChild(source);
                if (!p.isConnected)
                    break;
                p.load();
                p.play().catch(() => { });
                break;
            }
            else
                is_downgraded = true;
            case 'text': if (!(await configProvider.get('DisallowTextPreview') == 'true') && majorType === 'text') {
                this.#el.classList.add('text');
                try {
                    const resp = await fetch(theUrl);
                    const blob = await resp.blob();
                    if (blob.size > 1024 * 1024) {
                        this.#el.innerText = i18n('tftl');
                        const a = document.createElement('a');
                        a.href = theUrl;
                        a.target = '_blank';
                        a.innerText = i18n('c2dl');
                        a.rel = 'noopener noreferrer';
                        a.download = 'true';
                        this.#el.append(a);
                        break;
                    }
                    this.#el.innerText = '';
                    this.#el.append(document.createTextNode(await blob.text()));
                }
                catch (error) {
                    this.#el.innerText = `${i18n('f2lp')}: ${error}`;
                }
                break;
            }
            else
                is_downgraded = true;
            case 'image': if (!(await configProvider.get('DisallowMediaPreview') == 'true' || await configProvider.get('DisallowImagePreview') == 'true') && majorType === 'image') {
                let img = document.createElement('img');
                img.id = 'app';
                img.src = theUrl;
                img.alt = fileName;
                img.addEventListener('click', () => {
                    img.classList.toggle('scale');
                });
                this.#el.replaceWith(img);
                break;
            }
            else
                is_downgraded = true;
            default: switch (fileType) {
                case 'application/pdf': if (!(await configProvider.get('DisallowPdfPreview') == 'true')) {
                    fetch(theUrl).then(v => v.blob()).then(v => {
                        let p = document.createElement('object');
                        p.id = 'app';
                        this.#el.replaceWith(p);
                        p.data = URL.createObjectURL(v);
                        p.type = fileType;
                    }).catch(e => this.#el.innerText = `${i18n('f2lp')}: ${e}`);
                    break;
                }
                else
                    is_downgraded = true;
                default: {
                    // 根据扩展名判断
                    const ext = fileName.includes('.') ? (fileName.split('.').pop()?.toLowerCase()) : '';
                    switch (ext) {
                        case 'doc':
                        case 'docx':
                        case 'xls':
                        case 'xlsx':
                        case 'ppt':
                        case 'pptx':
                            if (!(await configProvider.get('DisallowOnlineOfficeFilePreview') == 'true' || await configProvider.get('DisallowOnlinePreview') == 'true')) {
                                // 使用 https://view.officeapps.live.com/op/embed.aspx
                                const url = new URL('https://view.officeapps.live.com/op/embed.aspx');
                                url.searchParams.set('src', theUrl);
                                // 创建iframe以预览
                                const iframe = document.createElement('iframe');
                                iframe.setAttribute('style', 'width: 100%; height: 100%; border: 0; box-sizing: border-box;');
                                iframe.src = url.href;
                                this.#el.replaceWith(iframe);
                                break;
                            }
                            else
                                is_downgraded = true;
                        default: {
                            this.#el.innerText = '';
                            this.#el.classList.add('text');
                            const a = document.createElement('a');
                            a.href = theUrl;
                            a.target = '_blank';
                            a.innerText = i18n('c2dl');
                            a.rel = 'noopener noreferrer';
                            a.download = 'true';
                            this.#el.append(is_downgraded ? i18n('phbdd2ac') : i18n('np'), a);
                        }
                    }
                }
            }
        }
        if ('image/audio/video'.split('/').includes(majorType) && !is_downgraded) {
            this.classList.add('media');
        }
        if (is_downgraded) {
            this.dataset.excludeBindmove = 'true';
        }
        this.#initbit = true;
    }
}
// Define the CSS styles
HTMLCommonFilePreviewElement.stylesheet.replace(`
:host {
    width: 100%;
    height: 100%;
    overflow: auto;
    border: 0;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
}
:host(.media) {
    background-color: black;
    align-items: center;
    justify-content: center;
}

* {
    box-sizing: border-box;
}

a {
    color: blue;
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
}

#app.text {
    padding: 10px;
    white-space: pre;
    font-family: Consolas, monospace;
}

img#app {
    cursor: zoom-in;
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    width: fit-content;
    height: fit-content;
    margin: auto;
}

img#app.scale {
    max-width: unset;
    max-height: unset;
    cursor: zoom-out;
}

video#app, object#app {
    width: 100%;
    height: 100%;
}

audio#app {
    margin: auto;
}
`);
// Register the custom element
customElements.define('common-file-preview', HTMLCommonFilePreviewElement);
//# sourceMappingURL=main.js.map